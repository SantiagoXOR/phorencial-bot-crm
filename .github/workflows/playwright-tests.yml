name: 🎭 Playwright E2E Tests - CRM Phorencial

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar tests diariamente a las 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Suite de tests a ejecutar'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - dashboard
          - leads
          - documents
          - settings
          - ui-modern
          - formosa-data

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  test:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🔧 Setup test environment
        run: |
          echo "PLAYWRIGHT_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: 🚀 Build application
        run: npm run build

      - name: 🧪 Run Playwright tests
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "all" ] || [ -z "${{ github.event.inputs.test_suite }}" ]; then
            npx playwright test --project=${{ matrix.browser }}
          else
            npx playwright test tests/${{ github.event.inputs.test_suite }}.spec.ts --project=${{ matrix.browser }}
          fi
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: 📸 Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}-${{ github.run_number }}
          path: test-results/screenshots/
          retention-days: 7

      - name: 📹 Upload videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: videos-${{ matrix.browser }}-${{ github.run_number }}
          path: test-results/videos/
          retention-days: 7

  mobile-tests:
    name: 📱 Mobile E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: 🔧 Setup test environment
        run: |
          echo "PLAYWRIGHT_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: 🚀 Build application
        run: npm run build

      - name: 📱 Run Mobile tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"

      - name: 📊 Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-mobile-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: 🚀 Build application
        run: npm run build

      - name: ⚡ Run Performance tests
        run: npx playwright test --grep="tiempo de carga|performance|⚡" --project=chromium

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: test-results/
          retention-days: 30

  report:
    name: 📋 Generate Test Report
    runs-on: ubuntu-latest
    needs: [test, mobile-tests, performance-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 🎭 Install Playwright
        run: |
          npm install @playwright/test
          npx playwright install --with-deps

      - name: 📊 Merge test results
        run: |
          mkdir -p merged-results
          find artifacts/ -name "results.json" -exec cp {} merged-results/ \;
          find artifacts/ -name "results.xml" -exec cp {} merged-results/ \;

      - name: 📋 Generate HTML Report
        run: |
          if [ -d "artifacts/playwright-results-chromium/playwright-report" ]; then
            cp -r artifacts/playwright-results-chromium/playwright-report ./
          fi

      - name: 📤 Upload merged report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-test-report
          path: |
            playwright-report/
            merged-results/
          retention-days: 30

      - name: 📊 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Playwright Test Results'
          path: 'merged-results/*.xml'
          reporter: 'java-junit'

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test, mobile-tests, performance-tests, report]
    if: always()
    
    steps:
      - name: 📊 Calculate test summary
        id: test-summary
        run: |
          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.mobile-tests.result }}" = "success" ] && [ "${{ needs.performance-tests.result }}" = "success" ]; then
            echo "status=✅ PASSED" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: 📢 Create test summary
        run: |
          echo "## 🎭 Playwright Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.test-summary.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suites:" >> $GITHUB_STEP_SUMMARY
          echo "- **Desktop Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mobile Tests:** ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests:** ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Browsers Tested:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Chromium" >> $GITHUB_STEP_SUMMARY
          echo "- 🦊 Firefox" >> $GITHUB_STEP_SUMMARY
          echo "- 🧭 WebKit (Safari)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CRM Phorencial Features Validated:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Autenticación con roles (ADMIN, ANALISTA, VENDEDOR)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dashboard modernizado con métricas de Formosa" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Sistema de filtros avanzado en Leads" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Páginas Documents y Settings" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ UI moderna con gradientes y animaciones" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Datos específicos de Formosa (1000+ leads)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Responsive design" >> $GITHUB_STEP_SUMMARY
