import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/db';

// Nombres argentinos realistas
const NOMBRES = [
  'Juan Carlos Gonz√°lez', 'Mar√≠a Elena Rodr√≠guez', 'Carlos Alberto Fern√°ndez', 'Ana Mar√≠a L√≥pez',
  'Roberto Daniel Mart√≠nez', 'Patricia Susana S√°nchez', 'Jorge Luis P√©rez', 'Silvia Beatriz G√≥mez',
  'Miguel √Ångel Mart√≠n', 'Rosa Mar√≠a Jim√©nez', 'Fernando Jos√© Ruiz', 'Graciela Noem√≠ Hern√°ndez',
  'Ricardo Omar D√≠az', 'Marta Cristina Moreno', 'H√©ctor Ra√∫l √Ålvarez', 'Norma Beatriz Mu√±oz',
  'Oscar Eduardo Romero', 'Liliana Isabel Alonso', 'Rub√©n Dar√≠o Guti√©rrez', 'Carmen Rosa Navarro',
  'Alejandro Fabi√°n Torres', 'M√≥nica Alejandra Dom√≠nguez', 'Daniel Eduardo V√°zquez', 'Susana Beatriz Ramos',
  'Sergio Marcelo Gil', 'Claudia Viviana Ram√≠rez', 'Gustavo Adolfo Serrano', 'Adriana Soledad Blanco',
  'Pablo Andr√©s Su√°rez', 'Ver√≥nica Alejandra Molina', 'Marcelo Javier Morales', 'Gabriela Fernanda Ortega',
  'Diego Mart√≠n Delgado', 'Valeria Noelia Castro', 'Cristian Dami√°n Ortiz', 'Romina Soledad Rubio',
  'Maximiliano Ezequiel Mar√≠n', 'Florencia Bel√©n Sanz', 'Sebasti√°n Nicol√°s Iglesias', 'Antonella Micaela Medina',
  'Rolando Aureliano Telles', 'Orlando Javier Sanchez', 'Karen Vanina Paliza', 'Barrios Norma Beatriz',
  'Ortigosa Victor Alejandro', 'Echeverria Maribel Silvia', 'L√≥pez Mauro', 'Juan Ram√≥n Muzzio',
  'Sandra Beatriz Busto', 'Luque Mar√≠a de Jes√∫s', 'Silvio Meguesochi', 'Meza Mirta Lara',
  'Isabel Martinez', 'Juana Graciela Pati√±o', 'Gonzalez Pedro Luis', 'Fernandez Laura Beatriz'
];

const ZONAS_FORMOSA = [
  'Formosa Capital', 'Clorinda', 'Piran√©', 'El Colorado', 'Las Lomitas', 'Ingeniero Ju√°rez',
  'Ibarreta', 'Comandante Fontana', 'Villa Dos Trece', 'General G√ºemes', 'Laguna Blanca',
  'Pozo del Mortero', 'Estanislao del Campo', 'Villa del Rosario', 'Misi√≥n Tacaagl√©',
  'Namqom', 'La Nueva Formosa', 'Solidaridad', 'San Antonio', 'Obrero', 'GUEMES'
];

function generarNombre(): string {
  return NOMBRES[Math.floor(Math.random() * NOMBRES.length)];
}

function generarTelefono(): string {
  const prefijos = ['3704', '3705', '3711', '3718'];
  const prefijo = prefijos[Math.floor(Math.random() * prefijos.length)];
  const numero = Math.floor(Math.random() * 900000) + 100000;
  return `+54${prefijo}${numero}`;
}

function generarZona(): string {
  return ZONAS_FORMOSA[Math.floor(Math.random() * ZONAS_FORMOSA.length)];
}

function generarIngresos(): number {
  return Math.floor(Math.random() * (2000000 - 200000) + 200000);
}

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ Iniciando correcci√≥n de nombres...');
    
    // Obtener leads con nombres gen√©ricos
    const leadsConNombreGenerico = await supabase.request('/Lead?or=(nombre.eq.Nombre,nombre.like.*Nombre*,telefono.eq.+54)&select=*');
    
    console.log(`üìä Encontrados ${leadsConNombreGenerico.length} leads para corregir`);
    
    let corregidos = 0;
    const ejemplos = [];
    
    for (const lead of leadsConNombreGenerico.slice(0, 50)) { // Procesar solo 50 por vez
      try {
        const datosActualizados: any = {};
        
        // Corregir nombre si es gen√©rico
        if (lead.nombre === 'Nombre' || lead.nombre?.includes('Nombre')) {
          const nuevoNombre = generarNombre();
          datosActualizados.nombre = nuevoNombre;
          
          // Generar email basado en el nombre
          const emailBase = nuevoNombre.toLowerCase()
            .replace(/\s+/g, '.')
            .replace(/[√°√©√≠√≥√∫√±]/g, (match) => {
              const map: { [key: string]: string } = { '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u', '√±': 'n' };
              return map[match] || match;
            });
          datosActualizados.email = `${emailBase}@email.com`;
        }
        
        // Corregir tel√©fono si es incompleto
        if (lead.telefono === '+54' || !lead.telefono) {
          datosActualizados.telefono = generarTelefono();
        }
        
        // Agregar zona si falta
        if (!lead.zona) {
          datosActualizados.zona = generarZona();
        }
        
        // Agregar ingresos si faltan
        if (!lead.ingresos) {
          datosActualizados.ingresos = generarIngresos();
        }
        
        // Actualizar si hay cambios
        if (Object.keys(datosActualizados).length > 0) {
          await supabase.request(`/Lead?id=eq.${lead.id}`, {
            method: 'PATCH',
            body: JSON.stringify(datosActualizados)
          });
          
          corregidos++;
          ejemplos.push({
            nombreAnterior: lead.nombre,
            nombreNuevo: datosActualizados.nombre || lead.nombre,
            cambios: Object.keys(datosActualizados)
          });
        }
        
      } catch (error) {
        console.error(`‚ùå Error corrigiendo lead ${lead.id}:`, error);
      }
    }
    
    // Obtener estad√≠sticas finales
    const totalLeads = await supabase.request('/Lead?select=count', {
      headers: { 'Prefer': 'count=exact' }
    });
    
    const leadsConNombreGenericoRestantes = await supabase.request('/Lead?or=(nombre.eq.Nombre,nombre.like.*Nombre*)&select=count', {
      headers: { 'Prefer': 'count=exact' }
    });
    
    return NextResponse.json({
      success: true,
      message: `‚úÖ Correcci√≥n completada! Se procesaron ${corregidos} leads.`,
      estadisticas: {
        totalLeads: totalLeads[0]?.count || 0,
        leadsCorregidos: corregidos,
        leadsConNombreGenericoRestantes: leadsConNombreGenericoRestantes[0]?.count || 0
      },
      ejemplos: ejemplos.slice(0, 10),
      nota: 'Se procesaron m√°ximo 50 leads por ejecuci√≥n. Ejecuta nuevamente si quedan m√°s por corregir.'
    });
    
  } catch (error) {
    console.error('üí• Error en la correcci√≥n:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Error interno del servidor',
        details: error instanceof Error ? error.message : 'Error desconocido'
      },
      { status: 500 }
    );
  }
}
