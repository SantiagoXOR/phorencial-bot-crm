const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Nombres argentinos realistas
const NOMBRES_ARGENTINOS = [
  'Juan Carlos', 'Mar√≠a Elena', 'Carlos Alberto', 'Ana Mar√≠a', 'Roberto Daniel',
  'Patricia Susana', 'Jorge Luis', 'Silvia Beatriz', 'Miguel √Ångel', 'Rosa Mar√≠a',
  'Fernando Jos√©', 'Graciela Noem√≠', 'Ricardo Omar', 'Marta Cristina', 'H√©ctor Ra√∫l',
  'Norma Beatriz', 'Oscar Eduardo', 'Liliana Isabel', 'Rub√©n Dar√≠o', 'Carmen Rosa',
  'Alejandro Fabi√°n', 'M√≥nica Alejandra', 'Daniel Eduardo', 'Susana Beatriz', 'Sergio Marcelo',
  'Claudia Viviana', 'Gustavo Adolfo', 'Adriana Soledad', 'Pablo Andr√©s', 'Ver√≥nica Alejandra',
  'Marcelo Javier', 'Gabriela Fernanda', 'Diego Mart√≠n', 'Valeria Noelia', 'Cristian Dami√°n',
  'Romina Soledad', 'Maximiliano Ezequiel', 'Florencia Bel√©n', 'Sebasti√°n Nicol√°s', 'Antonella Micaela',
  'Rolando Aureliano', 'Orlando Javier', 'Karen Vanina', 'Barrios Norma', 'Ortigosa Victor',
  'Echeverria Maribel', 'L√≥pez Mauro', 'Juan Ram√≥n', 'Sandra Beatriz', 'Luque Mar√≠a',
  'Silvio Meguesochi', 'Meza Mirta', 'Isabel Martinez', 'Juana Graciela', 'Gonzalez Pedro',
  'Fernandez Laura', 'Rodriguez Carlos', 'Martinez Ana', 'Garcia Luis', 'Perez Rosa'
];

const APELLIDOS_ARGENTINOS = [
  'Gonz√°lez', 'Rodr√≠guez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez', 'P√©rez', 'G√≥mez',
  'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno', '√Ålvarez', 'Mu√±oz',
  'Romero', 'Alonso', 'Guti√©rrez', 'Navarro', 'Torres', 'Dom√≠nguez', 'V√°zquez', 'Ramos',
  'Gil', 'Ram√≠rez', 'Serrano', 'Blanco', 'Su√°rez', 'Molina', 'Morales', 'Ortega',
  'Delgado', 'Castro', 'Ortiz', 'Rubio', 'Mar√≠n', 'Sanz', 'Iglesias', 'Medina',
  'Telles', 'Sanchez', 'Paliza', 'Beatriz', 'Alejandro', 'Silvia', 'Muzzio', 'Busto',
  'Pati√±o', 'Lara', 'Bazan', 'Villalba', 'Coronel', 'Acosta', 'Vargas', 'Herrera'
];

const ZONAS_FORMOSA = [
  'Formosa Capital', 'Clorinda', 'Piran√©', 'El Colorado', 'Las Lomitas', 'Ingeniero Ju√°rez',
  'Ibarreta', 'Comandante Fontana', 'Villa Dos Trece', 'General G√ºemes', 'Laguna Blanca',
  'Pozo del Mortero', 'Estanislao del Campo', 'Villa del Rosario', 'Misi√≥n Tacaagl√©',
  'Riacho He-H√©', 'Subteniente Per√≠n', 'Mayor Vicente Villafa√±e', 'Tres Lagunas',
  'Laguna Naineck', 'Buena Vista', 'Fort√≠n Lugones', 'General Mosconi', 'Siete Palmas',
  'Namqom', 'La Nueva Formosa', 'Solidaridad', 'San Antonio', 'Obrero', 'GUEMES'
];

function generarNombreAleatorio() {
  const nombre = NOMBRES_ARGENTINOS[Math.floor(Math.random() * NOMBRES_ARGENTINOS.length)];
  const apellido = APELLIDOS_ARGENTINOS[Math.floor(Math.random() * APELLIDOS_ARGENTINOS.length)];
  return `${nombre} ${apellido}`;
}

function formatearTelefono(telefono) {
  if (!telefono || telefono === '+54') {
    // Generar tel√©fono aleatorio de Formosa
    const prefijos = ['3704', '3705', '3711', '3718'];
    const prefijo = prefijos[Math.floor(Math.random() * prefijos.length)];
    const numero = Math.floor(Math.random() * 900000) + 100000;
    return `+54${prefijo}${numero}`;
  }
  return telefono;
}

function generarZonaAleatoria() {
  return ZONAS_FORMOSA[Math.floor(Math.random() * ZONAS_FORMOSA.length)];
}

function generarIngresosAleatorios() {
  // Generar ingresos realistas entre 200,000 y 2,000,000
  const min = 200000;
  const max = 2000000;
  return Math.floor(Math.random() * (max - min) + min);
}

async function actualizarNombresYDatos() {
  try {
    console.log('üîÑ Iniciando actualizaci√≥n de nombres y datos...');
    
    // Obtener todos los leads que tienen "Nombre" gen√©rico o datos incompletos
    const leadsParaActualizar = await prisma.lead.findMany({
      where: {
        OR: [
          { nombre: 'Nombre' },
          { nombre: { contains: 'Nombre' } },
          { telefono: '+54' },
          { zona: null },
          { ingresos: null }
        ]
      }
    });
    
    console.log(`üìä Encontrados ${leadsParaActualizar.length} leads para actualizar`);
    
    let actualizados = 0;
    
    for (const lead of leadsParaActualizar) {
      try {
        const datosActualizados = {};
        
        // Actualizar nombre si es gen√©rico
        if (lead.nombre === 'Nombre' || lead.nombre.includes('Nombre')) {
          const nuevoNombre = generarNombreAleatorio();
          datosActualizados.nombre = nuevoNombre;
          
          // Actualizar email basado en el nuevo nombre
          const emailBase = nuevoNombre.toLowerCase()
            .replace(/\s+/g, '.')
            .replace(/[√°√©√≠√≥√∫√±]/g, (match) => {
              const map = { '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u', '√±': 'n' };
              return map[match] || match;
            });
          datosActualizados.email = `${emailBase}@email.com`;
        }
        
        // Actualizar tel√©fono si es incompleto
        if (lead.telefono === '+54' || !lead.telefono) {
          datosActualizados.telefono = formatearTelefono(lead.telefono);
        }
        
        // Actualizar zona si est√° vac√≠a
        if (!lead.zona) {
          datosActualizados.zona = generarZonaAleatoria();
        }
        
        // Actualizar ingresos si est√°n vac√≠os
        if (!lead.ingresos) {
          datosActualizados.ingresos = generarIngresosAleatorios();
        }
        
        // Solo actualizar si hay cambios
        if (Object.keys(datosActualizados).length > 0) {
          await prisma.lead.update({
            where: { id: lead.id },
            data: datosActualizados
          });
          
          actualizados++;
          
          if (actualizados % 50 === 0) {
            console.log(`‚úÖ Actualizados ${actualizados} leads...`);
          }
        }
        
      } catch (error) {
        console.error(`‚ùå Error actualizando lead ${lead.id}:`, error.message);
      }
    }
    
    console.log(`\nüéâ Actualizaci√≥n completada!`);
    console.log(`‚úÖ Leads actualizados: ${actualizados}`);
    
    // Mostrar estad√≠sticas finales
    const totalLeads = await prisma.lead.count();
    const leadsConNombreGenerico = await prisma.lead.count({
      where: {
        OR: [
          { nombre: 'Nombre' },
          { nombre: { contains: 'Nombre' } }
        ]
      }
    });
    
    console.log(`üìä Total de leads: ${totalLeads}`);
    console.log(`üìù Leads con nombre gen√©rico restantes: ${leadsConNombreGenerico}`);
    
  } catch (error) {
    console.error('üí• Error en la actualizaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  actualizarNombresYDatos();
}

module.exports = { actualizarNombresYDatos };
