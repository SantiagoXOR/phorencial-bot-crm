#!/usr/bin/env node

/**
 * Script para ejecutar tests de Playwright del CRM Phorencial
 * Uso: node scripts/run-tests.js [opciones]
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Configuraci√≥n de colores para la consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Funci√≥n para imprimir con colores
function colorLog(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Funci√≥n para mostrar ayuda
function showHelp() {
  colorLog('cyan', 'üé≠ CRM Phorencial - Playwright Test Runner');
  console.log('');
  colorLog('yellow', 'Uso:');
  console.log('  node scripts/run-tests.js [opciones]');
  console.log('');
  colorLog('yellow', 'Opciones:');
  console.log('  --suite <nombre>     Suite espec√≠fica a ejecutar');
  console.log('  --browser <nombre>   Navegador espec√≠fico (chromium, firefox, webkit)');
  console.log('  --headed            Ejecutar en modo headed (visible)');
  console.log('  --debug             Ejecutar en modo debug');
  console.log('  --ui                Abrir UI de Playwright');
  console.log('  --report            Abrir reporte HTML despu√©s de ejecutar');
  console.log('  --mobile            Ejecutar solo tests mobile');
  console.log('  --help              Mostrar esta ayuda');
  console.log('');
  colorLog('yellow', 'Suites disponibles:');
  console.log('  auth                Tests de autenticaci√≥n');
  console.log('  dashboard           Tests del dashboard modernizado');
  console.log('  leads               Tests de gesti√≥n de leads');
  console.log('  documents           Tests de p√°gina Documents');
  console.log('  settings            Tests de p√°gina Settings');
  console.log('  ui-modern           Tests de UI moderna y responsive');
  console.log('  formosa-data        Tests de datos espec√≠ficos de Formosa');
  console.log('');
  colorLog('yellow', 'Ejemplos:');
  console.log('  node scripts/run-tests.js --suite auth --browser chromium');
  console.log('  node scripts/run-tests.js --mobile --headed');
  console.log('  node scripts/run-tests.js --ui');
  console.log('  node scripts/run-tests.js --debug --suite dashboard');
}

// Funci√≥n para ejecutar comando
function runCommand(command, args, options = {}) {
  return new Promise((resolve, reject) => {
    colorLog('blue', `üöÄ Ejecutando: ${command} ${args.join(' ')}`);
    
    const child = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      ...options
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Comando fall√≥ con c√≥digo ${code}`));
      }
    });

    child.on('error', (error) => {
      reject(error);
    });
  });
}

// Funci√≥n para verificar que Playwright est√° instalado
async function checkPlaywrightInstallation() {
  try {
    await runCommand('npx', ['playwright', '--version']);
    return true;
  } catch (error) {
    colorLog('red', '‚ùå Playwright no est√° instalado');
    colorLog('yellow', 'üí° Ejecuta: npm install @playwright/test');
    return false;
  }
}

// Funci√≥n para verificar que los navegadores est√°n instalados
async function checkBrowsers() {
  const browsersPath = path.join(process.cwd(), 'node_modules', '@playwright', 'test');
  if (!fs.existsSync(browsersPath)) {
    colorLog('yellow', '‚ö†Ô∏è  Los navegadores de Playwright no est√°n instalados');
    colorLog('blue', 'üîß Instalando navegadores...');
    
    try {
      await runCommand('npx', ['playwright', 'install']);
      colorLog('green', '‚úÖ Navegadores instalados correctamente');
    } catch (error) {
      colorLog('red', '‚ùå Error instalando navegadores');
      throw error;
    }
  }
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  
  // Mostrar ayuda
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }

  colorLog('magenta', 'üé≠ CRM Phorencial - Test Runner');
  colorLog('cyan', 'üöÄ Iniciando tests end-to-end...');
  console.log('');

  // Verificar instalaci√≥n
  if (!(await checkPlaywrightInstallation())) {
    return;
  }

  await checkBrowsers();

  // Parsear argumentos
  const suite = args.includes('--suite') ? args[args.indexOf('--suite') + 1] : null;
  const browser = args.includes('--browser') ? args[args.indexOf('--browser') + 1] : null;
  const headed = args.includes('--headed');
  const debug = args.includes('--debug');
  const ui = args.includes('--ui');
  const report = args.includes('--report');
  const mobile = args.includes('--mobile');

  // Construir comando de Playwright
  let playwrightArgs = ['playwright', 'test'];

  // Suite espec√≠fica
  if (suite) {
    playwrightArgs.push(`tests/${suite}.spec.ts`);
    colorLog('yellow', `üìã Ejecutando suite: ${suite}`);
  }

  // Navegador espec√≠fico
  if (browser) {
    playwrightArgs.push('--project', browser);
    colorLog('yellow', `üåê Navegador: ${browser}`);
  }

  // Tests mobile
  if (mobile) {
    playwrightArgs.push('--project', 'Mobile Chrome', '--project', 'Mobile Safari');
    colorLog('yellow', 'üì± Ejecutando tests mobile');
  }

  // Modo headed
  if (headed) {
    playwrightArgs.push('--headed');
    colorLog('yellow', 'üëÅÔ∏è  Modo headed activado');
  }

  // Modo debug
  if (debug) {
    playwrightArgs.push('--debug');
    colorLog('yellow', 'üêõ Modo debug activado');
  }

  // UI mode
  if (ui) {
    playwrightArgs = ['playwright', 'test', '--ui'];
    colorLog('yellow', 'üé® Abriendo UI de Playwright');
  }

  try {
    console.log('');
    colorLog('green', 'üß™ Ejecutando tests...');
    console.log('');

    // Ejecutar tests
    await runCommand('npx', playwrightArgs);

    console.log('');
    colorLog('green', '‚úÖ Tests completados exitosamente');

    // Abrir reporte si se solicita
    if (report && !ui && !debug) {
      colorLog('blue', 'üìä Abriendo reporte HTML...');
      await runCommand('npx', ['playwright', 'show-report']);
    }

    // Mostrar resumen
    console.log('');
    colorLog('cyan', 'üìä Resumen de validaciones:');
    console.log('  ‚úÖ Autenticaci√≥n con roles (ADMIN, ANALISTA, VENDEDOR)');
    console.log('  ‚úÖ Dashboard modernizado con m√©tricas de Formosa');
    console.log('  ‚úÖ Sistema de filtros avanzado en Leads');
    console.log('  ‚úÖ P√°ginas Documents y Settings');
    console.log('  ‚úÖ UI moderna con gradientes y animaciones');
    console.log('  ‚úÖ Datos espec√≠ficos de Formosa (1000+ leads)');
    console.log('  ‚úÖ Responsive design');
    console.log('');
    colorLog('magenta', 'üéâ ¬°Migraci√≥n selectiva validada exitosamente!');

  } catch (error) {
    console.log('');
    colorLog('red', '‚ùå Error ejecutando tests:');
    console.error(error.message);
    
    console.log('');
    colorLog('yellow', 'üí° Sugerencias:');
    console.log('  - Verifica que el servidor est√© corriendo (npm run dev)');
    console.log('  - Revisa que las variables de entorno est√©n configuradas');
    console.log('  - Ejecuta con --headed para ver qu√© est√° pasando');
    console.log('  - Usa --debug para depurar paso a paso');
    
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(error => {
    colorLog('red', '‚ùå Error fatal:');
    console.error(error);
    process.exit(1);
  });
}

module.exports = { main, runCommand, colorLog };
